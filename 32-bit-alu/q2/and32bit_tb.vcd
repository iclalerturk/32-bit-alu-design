$date
	Thu Mar 28 17:36:42 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module and32bit_tb $end
$var wire 32 ! out [31:0] $end
$var reg 32 " a [31:0] $end
$var reg 32 # b [31:0] $end
$scope module a1 $end
$var wire 32 $ a [31:0] $end
$var wire 32 % b [31:0] $end
$var wire 32 & out [31:0] $end
$scope module a1 $end
$var wire 4 ' a [3:0] $end
$var wire 4 ( b [3:0] $end
$var wire 4 ) out [3:0] $end
$scope module a1 $end
$var wire 1 * a $end
$var wire 1 + b $end
$var wire 1 , out $end
$upscope $end
$scope module a2 $end
$var wire 1 - a $end
$var wire 1 . b $end
$var wire 1 / out $end
$upscope $end
$scope module a3 $end
$var wire 1 0 a $end
$var wire 1 1 b $end
$var wire 1 2 out $end
$upscope $end
$scope module a4 $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 5 out $end
$upscope $end
$upscope $end
$scope module a2 $end
$var wire 4 6 a [3:0] $end
$var wire 4 7 b [3:0] $end
$var wire 4 8 out [3:0] $end
$scope module a1 $end
$var wire 1 9 a $end
$var wire 1 : b $end
$var wire 1 ; out $end
$upscope $end
$scope module a2 $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 > out $end
$upscope $end
$scope module a3 $end
$var wire 1 ? a $end
$var wire 1 @ b $end
$var wire 1 A out $end
$upscope $end
$scope module a4 $end
$var wire 1 B a $end
$var wire 1 C b $end
$var wire 1 D out $end
$upscope $end
$upscope $end
$scope module a3 $end
$var wire 4 E a [3:0] $end
$var wire 4 F b [3:0] $end
$var wire 4 G out [3:0] $end
$scope module a1 $end
$var wire 1 H a $end
$var wire 1 I b $end
$var wire 1 J out $end
$upscope $end
$scope module a2 $end
$var wire 1 K a $end
$var wire 1 L b $end
$var wire 1 M out $end
$upscope $end
$scope module a3 $end
$var wire 1 N a $end
$var wire 1 O b $end
$var wire 1 P out $end
$upscope $end
$scope module a4 $end
$var wire 1 Q a $end
$var wire 1 R b $end
$var wire 1 S out $end
$upscope $end
$upscope $end
$scope module a4 $end
$var wire 4 T a [3:0] $end
$var wire 4 U b [3:0] $end
$var wire 4 V out [3:0] $end
$scope module a1 $end
$var wire 1 W a $end
$var wire 1 X b $end
$var wire 1 Y out $end
$upscope $end
$scope module a2 $end
$var wire 1 Z a $end
$var wire 1 [ b $end
$var wire 1 \ out $end
$upscope $end
$scope module a3 $end
$var wire 1 ] a $end
$var wire 1 ^ b $end
$var wire 1 _ out $end
$upscope $end
$scope module a4 $end
$var wire 1 ` a $end
$var wire 1 a b $end
$var wire 1 b out $end
$upscope $end
$upscope $end
$scope module a5 $end
$var wire 4 c a [3:0] $end
$var wire 4 d b [3:0] $end
$var wire 4 e out [3:0] $end
$scope module a1 $end
$var wire 1 f a $end
$var wire 1 g b $end
$var wire 1 h out $end
$upscope $end
$scope module a2 $end
$var wire 1 i a $end
$var wire 1 j b $end
$var wire 1 k out $end
$upscope $end
$scope module a3 $end
$var wire 1 l a $end
$var wire 1 m b $end
$var wire 1 n out $end
$upscope $end
$scope module a4 $end
$var wire 1 o a $end
$var wire 1 p b $end
$var wire 1 q out $end
$upscope $end
$upscope $end
$scope module a6 $end
$var wire 4 r a [3:0] $end
$var wire 4 s b [3:0] $end
$var wire 4 t out [3:0] $end
$scope module a1 $end
$var wire 1 u a $end
$var wire 1 v b $end
$var wire 1 w out $end
$upscope $end
$scope module a2 $end
$var wire 1 x a $end
$var wire 1 y b $end
$var wire 1 z out $end
$upscope $end
$scope module a3 $end
$var wire 1 { a $end
$var wire 1 | b $end
$var wire 1 } out $end
$upscope $end
$scope module a4 $end
$var wire 1 ~ a $end
$var wire 1 !" b $end
$var wire 1 "" out $end
$upscope $end
$upscope $end
$scope module a7 $end
$var wire 4 #" a [3:0] $end
$var wire 4 $" b [3:0] $end
$var wire 4 %" out [3:0] $end
$scope module a1 $end
$var wire 1 &" a $end
$var wire 1 '" b $end
$var wire 1 (" out $end
$upscope $end
$scope module a2 $end
$var wire 1 )" a $end
$var wire 1 *" b $end
$var wire 1 +" out $end
$upscope $end
$scope module a3 $end
$var wire 1 ," a $end
$var wire 1 -" b $end
$var wire 1 ." out $end
$upscope $end
$scope module a4 $end
$var wire 1 /" a $end
$var wire 1 0" b $end
$var wire 1 1" out $end
$upscope $end
$upscope $end
$scope module a8 $end
$var wire 4 2" a [3:0] $end
$var wire 4 3" b [3:0] $end
$var wire 4 4" out [3:0] $end
$scope module a1 $end
$var wire 1 5" a $end
$var wire 1 6" b $end
$var wire 1 7" out $end
$upscope $end
$scope module a2 $end
$var wire 1 8" a $end
$var wire 1 9" b $end
$var wire 1 :" out $end
$upscope $end
$scope module a3 $end
$var wire 1 ;" a $end
$var wire 1 <" b $end
$var wire 1 =" out $end
$upscope $end
$scope module a4 $end
$var wire 1 >" a $end
$var wire 1 ?" b $end
$var wire 1 @" out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0@"
0?"
1>"
0="
0<"
1;"
0:"
09"
18"
17"
16"
15"
b1 4"
b1 3"
b1111 2"
01"
00"
1/"
0."
0-"
1,"
1+"
1*"
1)"
0("
0'"
1&"
b10 %"
b10 $"
b1111 #"
0""
0!"
1~
0}
0|
1{
1z
1y
1x
1w
1v
1u
b11 t
b11 s
b1111 r
0q
0p
1o
1n
1m
1l
0k
0j
1i
0h
0g
1f
b100 e
b100 d
b1111 c
0b
0a
1`
1_
1^
1]
0\
0[
1Z
1Y
1X
1W
b101 V
b101 U
b1111 T
0S
0R
1Q
1P
1O
1N
1M
1L
1K
0J
0I
1H
b110 G
b110 F
b1111 E
0D
0C
1B
1A
1@
1?
1>
1=
1<
1;
1:
19
b111 8
b111 7
b1111 6
15
14
13
02
01
10
0/
0.
1-
0,
0+
1*
b1000 )
b1000 (
b1111 '
b10010001101000101011001111000 &
b10010001101000101011001111000 %
b11111111111111111111111111111111 $
b10010001101000101011001111000 #
b11111111111111111111111111111111 "
b10010001101000101011001111000 !
$end
#1
1,
b1 )
05
0;
0>
b0 8
0A
0M
b0 G
0P
0Y
b0 V
0_
b0 e
0n
0w
b0 t
0z
b0 %"
0+"
b1 !
b1 &
b0 4"
07"
1+
1.
11
1C
1I
1R
1[
1a
1g
1j
1p
1|
1!"
1'"
1-"
10"
19"
1<"
1?"
0-
00
03
09
0<
0?
0B
0H
0K
0N
0Q
0W
0Z
0]
0`
0f
0i
0l
0o
0u
0x
0{
0~
0&"
0)"
0,"
0/"
05"
08"
0;"
0>"
b1111 (
b1111 7
b1111 F
b1111 U
b1111 d
b1111 s
b1111 $"
b1111 3"
b1 '
b0 6
b0 E
b0 T
b0 c
b0 r
b0 #"
b0 2"
b11111111111111111111111111111111 #
b11111111111111111111111111111111 %
b1 "
b1 $
#2
b0 )
0,
b10000000000000000000000000000 !
b10000000000000000000000000000 &
b1 4"
17"
0+
0.
01
04
0:
0=
0@
0C
0I
0L
0O
0R
0X
0[
0^
0a
0g
0j
0m
0p
0v
0y
0|
0!"
0'"
0*"
0-"
00"
09"
0<"
0?"
15"
b0 (
b0 7
b0 F
b0 U
b0 d
b0 s
b0 $"
b1 3"
b1 2"
b10000000000000000000000000000 #
b10000000000000000000000000000 %
b10000000000000000000000000001 "
b10000000000000000000000000001 $
#3
