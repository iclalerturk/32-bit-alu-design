$date
	Wed Mar 27 16:21:52 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module fourBitAdder_tb $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " cout $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$var reg 1 % cin $end
$scope module add1 $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 1 % cin $end
$var wire 4 ( sum [3:0] $end
$var wire 1 " cout $end
$var wire 1 ) carry3 $end
$var wire 1 * carry2 $end
$var wire 1 + carry1 $end
$scope module ad1 $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 % cin $end
$var wire 1 + cout $end
$var wire 1 . sum_half $end
$var wire 1 / sum $end
$var wire 1 0 carry_half_2 $end
$var wire 1 1 carry_half $end
$scope module ha1 $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 1 carry $end
$var wire 1 . sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 . a $end
$var wire 1 % b $end
$var wire 1 0 carry $end
$var wire 1 / sum $end
$upscope $end
$upscope $end
$scope module ad2 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 + cin $end
$var wire 1 * cout $end
$var wire 1 4 sum_half $end
$var wire 1 5 sum $end
$var wire 1 6 carry_half_2 $end
$var wire 1 7 carry_half $end
$scope module ha1 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 7 carry $end
$var wire 1 4 sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 4 a $end
$var wire 1 + b $end
$var wire 1 6 carry $end
$var wire 1 5 sum $end
$upscope $end
$upscope $end
$scope module ad3 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 * cin $end
$var wire 1 ) cout $end
$var wire 1 : sum_half $end
$var wire 1 ; sum $end
$var wire 1 < carry_half_2 $end
$var wire 1 = carry_half $end
$scope module ha1 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 = carry $end
$var wire 1 : sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 : a $end
$var wire 1 * b $end
$var wire 1 < carry $end
$var wire 1 ; sum $end
$upscope $end
$upscope $end
$scope module ad4 $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 ) cin $end
$var wire 1 " cout $end
$var wire 1 @ sum_half $end
$var wire 1 A sum $end
$var wire 1 B carry_half_2 $end
$var wire 1 C carry_half $end
$scope module ha1 $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 C carry $end
$var wire 1 @ sum $end
$upscope $end
$scope module ha2 $end
$var wire 1 @ a $end
$var wire 1 ) b $end
$var wire 1 B carry $end
$var wire 1 A sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0C
0B
1A
0@
0?
0>
0=
1<
0;
1:
19
08
07
16
05
14
13
02
11
00
1/
0.
1-
1,
1+
1*
1)
b1001 (
b111 '
b1 &
1%
b111 $
b1 #
0"
b1001 !
$end
#10
